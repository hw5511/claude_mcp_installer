"""
HTML to Notion MCP - Claude에서 생성된 HTML을 GitHub Gist를 통해 Notion에 임베드하기 위한 스크립트
"""
from fastmcp import MCP, register_route
import os
import json
import re
import requests
from html.parser import HTMLParser

app = MCP()

# HTML 유효성 검사 클래스
class HTMLValidator(HTMLParser):
    def __init__(self):
        super().__init__()
        self.errors = []
        self.tags_stack = []
    
    def handle_starttag(self, tag, attrs):
        self.tags_stack.append(tag)
    
    def handle_endtag(self, tag):
        if self.tags_stack and self.tags_stack[-1] == tag:
            self.tags_stack.pop()
        else:
            self.errors.append(f"Mismatched closing tag: {tag}")
    
    def get_errors(self):
        if self.tags_stack:
            self.errors.append(f"Unclosed tags: {', '.join(self.tags_stack)}")
        return self.errors

def validate_and_optimize_html(html_content):
    """HTML 코드의 유효성을 검사하고 최적화합니다."""
    # 기본 검증
    validator = HTMLValidator()
    try:
        validator.feed(html_content)
        errors = validator.get_errors()
        
        if errors:
            return None, "\n".join(errors)
        
        # 간단한 최적화 작업 수행
        optimized_html = html_content
        
        # 1. DOCTYPE 확인 및 추가
        if "<!DOCTYPE html>" not in optimized_html:
            optimized_html = "<!DOCTYPE html>\n" + optimized_html
        
        # 2. <html>, <head>, <body> 태그 확인
        if "<html" not in optimized_html:
            # html 태그로 감싸기
            optimized_html = re.sub(r'<!DOCTYPE html>\s*', '<!DOCTYPE html>\n<html>\n', optimized_html)
            optimized_html += "\n</html>"
        
        if "<head" not in optimized_html:
            # head 태그 추가
            optimized_html = re.sub(r'<html[^>]*>\s*', '<html>\n<head>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n</head>\n', optimized_html)
        
        if "<body" not in optimized_html:
            # body 태그로 콘텐츠 감싸기
            optimized_html = re.sub(r'</head>\s*', '</head>\n<body>\n', optimized_html)
            optimized_html = re.sub(r'</html>\s*$', '\n</body>\n</html>', optimized_html)
        
        return optimized_html, "HTML validation successful"
    
    except Exception as e:
        return None, f"HTML parsing error: {str(e)}"

def create_gist(github_token, html_content, description="HTML generated by Claude"):
    """GitHub Gist를 생성하고 Gist ID를 반환합니다."""
    url = "https://api.github.com/gists"
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    data = {
        "description": description,
        "public": True,
        "files": {
            "claude_generated.html": {
                "content": html_content
            }
        }
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(data))
    
    if response.status_code == 201:
        return response.json()["id"]
    else:
        raise Exception(f"Failed to create Gist: {response.status_code} - {response.text}")

def get_raw_url(gist_id, github_username=None):
    """Gist의 raw URL을 생성합니다."""
    if github_username:
        # 사용자 이름이 있으면 더 예측 가능한 URL을 생성할 수 있습니다
        return f"https://gist.githubusercontent.com/{github_username}/{gist_id}/raw"
    else:
        # 사용자 이름이 없으면 Gist API로 세부 정보를 요청합니다
        url = f"https://api.github.com/gists/{gist_id}"
        response = requests.get(url)
        if response.status_code == 200:
            # raw_url을 파일에서 찾습니다
            for filename, file_info in response.json()["files"].items():
                return file_info["raw_url"]
        raise Exception(f"Failed to get Gist details: {response.status_code}")

def convert_to_renderable_url(raw_url):
    """GitHub Gist의 raw URL을 Notion에서 렌더링 가능한 URL로 변환합니다."""
    # 패턴: https://gist.githubusercontent.com/USERNAME/GIST_ID/raw/...
    gist_pattern = r'https://gist\.githubusercontent\.com/([^/]+)/([^/]+)/raw'
    match = re.match(gist_pattern, raw_url)
    
    if match:
        username, gist_id = match.groups()
        # 일반 Gist 뷰어 URL 반환
        return f"https://gist.github.com/{username}/{gist_id}"
    
    # 변환할 수 없는 경우 원래 URL 반환
    return raw_url

def check_url_accessibility(url):
    """URL이 공개적으로 접근 가능한지 확인합니다."""
    try:
        response = requests.head(url, timeout=5)
        return response.status_code >= 200 and response.status_code < 400
    except:
        return False

@register_route('/html-to-notion', method='POST')
def html_to_notion(req):
    """HTML 코드를 GitHub Gist로 변환하고 Notion에서 임베드 가능한 URL을 반환합니다."""
    # 요청 데이터 파싱
    data = req.get_json()
    html_content = data.get('html')
    description = data.get('description', "HTML generated by Claude")
    
    if not html_content:
        return {
            "success": False,
            "error": "HTML content is required"
        }
    
    # 1. GitHub 토큰 로드
    github_token = os.environ.get('GITHUB_TOKEN')
    github_username = os.environ.get('GITHUB_USERNAME')
    
    if not github_token:
        return {
            "success": False,
            "error": "GitHub token not found. Please set up the HTML to Notion MCP first."
        }
    
    # 2. HTML 유효성 검사 및 최적화
    valid_html, validation_message = validate_and_optimize_html(html_content)
    if not valid_html:
        return {
            "success": False,
            "error": f"HTML validation failed: {validation_message}"
        }
    
    # 3. GitHub Gist 생성
    try:
        gist_id = create_gist(github_token, valid_html, description)
        raw_url = get_raw_url(gist_id, github_username)
        
        # 4. 렌더링 가능한 URL로 변환
        renderable_url = convert_to_renderable_url(raw_url)
        
        # 5. URL 접근성 확인
        is_accessible = check_url_accessibility(renderable_url)
        
        return {
            "success": True,
            "gist_id": gist_id,
            "raw_url": raw_url,
            "embeddable_url": renderable_url,
            "is_accessible": is_accessible,
            "notion_embed_instructions": "In Notion, create a new block and type '/embed', then paste this URL."
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"Failed to create Gist: {str(e)}"
        }

# CLI 도구로도 사용할 수 있도록 메인 함수 구현
if __name__ == "__main__":
    import sys
    import argparse
    
    parser = argparse.ArgumentParser(description='HTML to Notion MCP')
    parser.add_argument('--html', required=True, help='HTML content or file path')
    parser.add_argument('--description', default='HTML generated by Claude', help='Gist description')
    args = parser.parse_args()
    
    # HTML 내용 확인 (파일 또는 직접 입력)
    html_content = args.html
    if os.path.exists(html_content):
        with open(html_content, 'r', encoding='utf-8') as f:
            html_content = f.read()
    
    # GitHub 토큰 로드
    github_token = os.environ.get('GITHUB_TOKEN')
    github_username = os.environ.get('GITHUB_USERNAME')
    
    if not github_token:
        print("Error: GitHub token not found in environment variables.")
        sys.exit(1)
    
    # HTML 유효성 검사 및 최적화
    valid_html, validation_message = validate_and_optimize_html(html_content)
    if not valid_html:
        print(f"Error: HTML validation failed: {validation_message}")
        sys.exit(1)
    
    # GitHub Gist 생성
    try:
        gist_id = create_gist(github_token, valid_html, args.description)
        raw_url = get_raw_url(gist_id, github_username)
        renderable_url = convert_to_renderable_url(raw_url)
        
        result = {
            "success": True,
            "gist_id": gist_id,
            "raw_url": raw_url,
            "embeddable_url": renderable_url,
            "notion_embed_instructions": "In Notion, create a new block and type '/embed', then paste this URL."
        }
        print(json.dumps(result, indent=2))
    except Exception as e:
        print(f"Error: Failed to create Gist: {str(e)}")
        sys.exit(1)
